feederObject = buildFeederObjectDynamic(model = model, cnolist = cnolist, indices = indices)
feederObject
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist)
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist, expansion = TRUE)
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist)
integratedModel$model$reacID
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist, expansion = TRUE)
integratedModel$model$reacID
rm(list = ls())
remove.packages("CNORfeeder")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder')
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
# loading the toy example
data("ToyModel", package="CellNOptR")
data("CNOlistToy", package="CellNOptR")
model = ToyModel
cnolist = CNOlist(CNOlistToy)
# set initial parameters (here parameters 'k' and 'tau' are optimised and 'n' fixed to 3)
ode_parameters=createLBodeContPars(model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
## Parameter Optimization
# essm
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 60;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=1000;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
paramsSSm$transfer_function = 4;
paramsSSm$lambda_tau=0.1
paramsSSm$lambda_k=0.01
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=0
paramsSSm$SScontrolPenalty_fac=0
## Training of the initial model
opt_pars=parEstimationLBode(cnolist, model, method="essm", ode_parameters=ode_parameters, paramsSSm=paramsSSm)
simData = plotLBodeFitness(cnolist = cnolist, model = model, ode_parameters = opt_pars, transfer_function = 4)
indices = identifyMisfitIndices(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.05)
library(CNORfeeder)
indices = identifyMisfitIndices(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.05)
feederObject = buildFeederObjectDynamic(model = model, cnolist = cnolist, indices = indices)
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist)
integratedModel$databaseWeight
plotModel(model = integratedModel$model, CNOlist = cnolist, indexIntegr = integratedModel$integLinksIdx)
ode_parameters=createLBodeContPars(integratedModel$model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
res = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, penFactor_k = 1000, paramsSSm = paramsSSm)
plotLBodeFitness(cnolist = res$CNOList, model = res$`Integrated-Model`$model, ode_parameters = res$Parameters, transfer_function = 4)
res = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, penFactor_k = 2, paramsSSm = paramsSSm)
dev.off()
getwd()
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder')
library(CellNOptR)
library(MEIGOR)
library(CNORode)
library(doParallel)
library(readr)
library(infotheo)
library(igraph)
library(CNORfeeder)
data("ToyModel", package="CellNOptR")
data("CNOlistToy", package="CellNOptR")
model = ToyModel
cnolist = CNOlist(CNOlistToy)
ode_parameters=createLBodeContPars(model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
## Parameter Optimization
# essm
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 60;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=1000;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
paramsSSm$transfer_function = 4;
paramsSSm$lambda_tau=0.1
paramsSSm$lambda_k=0.01
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=0
paramsSSm$SScontrolPenalty_fac=0
opt_pars=parEstimationLBode(cnolist, model, method="essm", ode_parameters=ode_parameters, paramsSSm=paramsSSm)
simData = plotLBodeFitness(cnolist = cnolist, model = model, ode_parameters = opt_pars, transfer_function = 4)
indices = identifyMisfitIndices(cnolist = cnolist, model = model, simData = simData, mseThresh = 0.05)
feederObject = buildFeederObjectDynamic(model = model, cnolist = cnolist, indices = indices, database = NULL, DDN = TRUE)
integratedModel = integrateLinks(feederObject = feederObject, cnolist = cnolist)
plotModel(model = integratedModel$model, CNOlist = cnolist, indexIntegr = integratedModel$integLinksIdx)
ode_parameters=createLBodeContPars(integratedModel$model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 3, UB_k = 1, UB_tau = 1, default_n = 3,
default_k = 0.5, default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
dev.off()
res1 = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, paramsSSm = paramsSSm, penFactor_k = 2)
plotLBodeFitness(cnolist = res1$CNOList, model = res1$`Integrated-Model`$model, ode_parameters = res1$Parameters, transfer_function = 4)
dev.off()
res2 = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, paramsSSm = paramsSSm, penFactor_k = 100)
plotLBodeFitness(cnolist = res2$CNOList, model = res2$`Integrated-Model`$model, ode_parameters = res2$Parameters, transfer_function = 4)
res2 = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, paramsSSm = paramsSSm, penFactor_k = 1000)
plotLBodeFitness(cnolist = res2$CNOList, model = res2$`Integrated-Model`$model, ode_parameters = res2$Parameters, transfer_function = 4)
integratedModel$model$reacID
integratedModel$databaseWeight
res2 = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, paramsSSm = paramsSSm, penFactor_k = 100)
plotLBodeFitness(cnolist = res2$CNOList, model = res2$`Integrated-Model`$model, ode_parameters = res2$Parameters, transfer_function = 4)
rm(res2)
dev.off()
res2 = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, penFactor_k = 100, paramsSSm = paramsSSm)
plotLBodeFitness(cnolist = res2$CNOList, model = res2$`Integrated-Model`$model, ode_parameters = res2$Parameters, transfer_function = 4)
res2 = runDynamicFeeder(cnolist = cnolist, integratedModel = integratedModel, ode_parameters = ode_parameters, penFactor_k = 10000, paramsSSm = paramsSSm)
plotLBodeFitness(cnolist = res2$CNOList, model = res2$`Integrated-Model`$model, ode_parameters = res2$Parameters, transfer_function = 4)
rm(list = ls())
library(CARNIVAL) # load CARNIVAL library
#Load files
file.copy(from=system.file(“SBV_EGF_tvalues.csv”,package=“CARNIVAL”),to=getwd(),overwrite=TRUE)
file.copy(from=system.file(“dorothea_TF_mapping.csv”,package=“CARNIVAL”),to=getwd(),overwrite=TRUE)
load(file = system.file(“BEST_viperRegulon.rdata”,package=“CARNIVAL”))
df<-read.csv2(“SBV_EGF_tvalues.csv”, row.names = ‘GeneName’)
map<-read.csv(“dorothea_TF_mapping.csv”)
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c(‘A’,‘B’,‘C’))
library(CARNIVAL) # load CARNIVAL library
#Load files
file.copy(from=system.file("SBV_EGF_tvalues.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
file.copy(from=system.file("BEST_viperRegulon.rdata",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
df<-read.csv2("SBV_EGF_tvalues.csv", row.names = 'GeneName')
map<-read.csv("dorothea_TF_mapping.csv")
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
library(CARNIVAL) # load CARNIVAL library
#Load files
file.copy(from=system.file("SBV_EGF_tvalues.csv",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
file.copy(from=system.file("BEST_viperRegulon.rdata",package="CARNIVAL"),to=getwd(),overwrite=TRUE)
load(file = system.file("BEST_viperRegulon.rdata",package="CARNIVAL"))
df<-read.csv2("SBV_EGF_tvalues.csv", row.names = 'GeneName')
map<-read.csv("dorothea_TF_mapping.csv")
#Run DoRothEA and convert from gene symbol to uniprot ID
TF_genesymbol<-runDoRothEA(df, regulon=viper_regulon, confidence_level=c('A','B','C'))
TF_genesymbol
sessionInfo()
rm(list)
rm(list = ls())
library(CellNOptR)
data("ToyModel", package="CellNOptR")
data("CNOlistToy", package="CellNOptR")
pknmodel = ToyModel
cnolist = CNOlist(CNOlistToy)
model = preprocessing(cnolist, pknmodel)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 5)
library(readr)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 5)
library(stringr)
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 5)
resILP
resILP = ilpBinaryT1(cnolist = cnolist, model = model, numSolutions = 3)
resILP$bitstringILP
cutAndPlot(CNOlist = cnolist, model = model, bStrings = resILP$bitstringILP[[1]])
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[1]]))
res = gaBinaryT1(cnolist, model, verbose=FALSE)
plotModel(model = model, CNOlist = cnolist)
cutAndPlot(cnolist, model, list(res$bString))
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[1]]))
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[2]]))
cutAndPlot(CNOlist = cnolist, model = model, bStrings = list(resILP$bitstringILP[[3]]))
dev.off()
vignette("CellNOptR")
vignette()
vignette("01-Working_with_large_arrays")
vignette("CellNOptR")
vignette("CellNOptR")
vignette(CellNOptR)
library(Biobase)
openVignette(package = "CellNOptR")
installed.packages(knitr)
install.packages('knitr', dependencies = TRUE)
library(knitr)
knit2pdf(input = "~/Documents/vignettes/CNORfeeder-vignette.Rnw", output = "~/Documents/vignettes/CNORfeeder-vignette.pdf")
rm(list = ls())
setwd("~/Documents/GitHub/CellNOpt-Feeder/vignettes/")
library(devtools)
install_github('saezlab/CellNOpt-Feeder')
dev.off()
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
vignette("CNORfeeder-vignette")
vignette("CNORfeeder-vignette")
remove.packages(CNORfeeder)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
vignette("CNORfeeder-vignette")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
remove.packages("CNORfeeder")
vignette("CNORfeeder-vignette")
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
getwd()
remove.packages(CellNOptR)
library(devtools)
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
remove.packages("CellNOptR")
library(devtools)
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
library(CellNOptR)
vignette("CellNOptR-vignette")
remove.packages("CNORode")
library(devtools)
install_github("saezlab/CNORode",ref="crossval", build_vignettes = TRUE)
library(CNORode)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
vignette("CellNOptR-vignette")
vignette("CNORode-vignette")
library("CARNIVAL")
?runCARNIVAL
?runPROGENy
library(OmnipathR)
interactions <-
import_Omnipath_Interactions(filter_databases=c())
interactions = interactions[which(sum(interactions$is_stimulation+interactions$is_inhibition)==1), ]
interactions <-
import_Omnipath_Interactions(filter_databases=c())
interactions = interactions[which((interactions$is_stimulation+interactions$is_inhibition)==1), ]
library("CNORode")
vignette("CNORode-vignette")
library(CNORode)
model=readSIF(system.file("extdata", "ToyModelMMB_FeedbackAnd.sif",
package="CNORode"));
cno_data=readMIDAS(system.file("extdata", "ToyModelMMB_FeedbackAnd.csv",
package="CNORode"));
cnolist=makeCNOlist(cno_data,subfield=FALSE);
plotModel(model = model, CNOlist = cnolist)
plotCNOlist(CNOlist = cnolist)
library(MEIGOR)
f_hepato<-getLBodeContObjFunction(cnolist, model, initial_pars, indices=NULL,
time = 1, verbose = 0, transfer_function = 2, reltol = 1e-05, atol = 1e-03,
maxStepSize = Inf, maxNumSteps = 1e4, maxErrTestsFails = 50, nan_fac = 1)
n_pars=length(initial_pars$LB);
problem<-list(f=f_hepato, x_L=initial_pars$LB[initial_pars$index_opt_pars],
x_U=initial_pars$UB[initial_pars$index_opt_pars]);
#Source a function containing the options used in the CeSSR publication
source(system.file("benchmarks","get_paper_settings.R",package="MEIGOR"))
#Set max time as 20 seconds per iteration
opts<-get_paper_settings(20);
Results<-CeSSR(problem,opts,Inf,Inf,3,TRUE,global_save_list=c('cnolist','model',
'initial_pars'))
library(MEIGOR)
source(system.file("benchmarks","get_paper_settings.R",package="MEIGOR"))
library(CellNOptR)
library(CNORode)
library(MEIGOR)
# MacNamara et al. 2012 case study:
data(PKN_ToyPB, package="CellNOptR")
data(CNOlist_ToyPB, package="CellNOptR")
# original and preprocessed network
plotModel(pknmodel, cnodata)
model = preprocessing(data = cnodata, model = pknmodel,
compression = T, expansion = T)
plotModel(model, cnodata)
plotCNOlist(CNOlist = cnodata)
# set initial parameters
ode_parameters=createLBodeContPars(model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 4, UB_k = 1,
UB_tau = 1, default_n = 3, default_k = 0.5,
default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
## Parameter Optimization
# essm
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 600;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=0;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
transferFun=4;
paramsSSm$transfer_function = transferFun;
paramsSSm$lambda_tau=0
paramsSSm$lambda_k=0
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=0
paramsSSm$SScontrolPenalty_fac=0
# run the optimisation algorithm
opt_pars=parEstimationLBode(cnodata,model, method="essm",
ode_parameters=ode_parameters, paramsSSm=paramsSSm)
library(doParallel)
R=crossvalidateODE(CNOlist = cnodata, model = model,
type="datapoint", nfolds=3, parallel = TRUE,
ode_parameters = ode_parameters, paramsSSm = paramsSSm)
rm(list = ls())
remove.packages("CNORode")
library(devtools)
install_github("saezlab/CNORode",ref="crossval", build_vignettes = TRUE)
library(CNORode)
?crossvalidateODE
library(CNORfeeder)
vignette("CNORfeeder-vignette")
data(CNOlistDREAM,package="CellNOptR")
data(DreamModel,package="CellNOptR")
BTable <- makeBTables(CNOlist=CNOlistDREAM, k=2, measErr=c(0.1, 0))
Lrank <- linksRanking(CNOlist=CNOlistDREAM, measErr=c(0.1, 0), savefile=FALSE)
model<-preprocessing(data=CNOlistDREAM, model=DreamModel)
modelIntegr <- mapBTables2model(BTable=BTable,model=model,allInter=TRUE)
plotModel(model=modelIntegr, CNOlist=CNOlistDREAM, indexIntegr=modelIntegr$indexIntegr)
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10)
data(PPINigraph,package="CNORfeeder")
data(UniprotIDdream,package="CNORfeeder")
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10,
UniprotID=UniprotIDdream, PPI=PPINigraph)
initBstring<-rep(1,length(modelIntegrWeight$reacID))
DreamT1opt<-gaBinaryT1W(CNOlist=CNOlistDREAM, model=modelIntegrWeight,
initBstring=initBstring, maxGens=2, popSize=5, verbose=FALSE)
plotModel(model=modelIntegrWeight, CNOlist=CNOlistDREAM, bString=DreamT1opt$bString)
dev.off()
library(CellNOptR)
vignette("CellNOptR-vignette")
library(CellNOptR)
?ilpBinaryT1
version
version
data(Ec_core, envir = environment()) #get Escherichia coli core metabolic model
bac <- Bac(Ec_core,deathrate=0.05,
minweight=0.05,growtype="exponential") #initialize a bacterium
arena <- Arena(n=20,m=20) #initialize the environment
arena <- addOrg(arena,bac,amount=10) #add 10 organisms
library(BacArena)
data(Ec_core, envir = environment()) #get Escherichia coli core metabolic model
bac <- Bac(Ec_core,deathrate=0.05,
minweight=0.05,growtype="exponential") #initialize a bacterium
arena <- Arena(n=20,m=20) #initialize the environment
arena <- addOrg(arena,bac,amount=10) #add 10 organisms
arena <- Arena(n=20,m=20)
mat <- matrix(sample(c(0,1), 400, replace = TRUE), nrow = 20, ncol = 20)
bac <- Bac(Ec_core)
arena <- addOrg(arena, specI=bac, posmat = mat)
rm(list = ls())
library(CARNIVAL) # load CARNIVAL library
library(dplyr) # load dplyr library
library(readr) # load readr library
library(igraph) # load igraph library
library(readxl) # load readxl library
library(lpSolve)
load(file = system.file("toy_inputs_ex1.RData",
package="CARNIVAL"))
load(file = system.file("toy_measurements_ex1.RData",
package="CARNIVAL"))
load(file = system.file("toy_network_ex1.RData",
package="CARNIVAL"))
# lpSolve
result = runCARNIVAL(netObj = toy_network_ex1, measObj = toy_measurements_ex1,
inputObj = toy_inputs_ex1)
result
warning()
warnings()
load(file = system.file("toy_measurements_ex2.RData",
package="CARNIVAL"))
load(file = system.file("toy_network_ex2.RData",
package="CARNIVAL"))
# lpSolve
result = runCARNIVAL(netObj = toy_network_ex2, measObj = toy_measurements_ex2)
result
getwd()
setw
vignette("CARNIVAL-vignette")
load(file = "~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/inst/progenyMembers.RData")
progenyMembers
progenyMembers$gene
library(DoRothEA)
load(file = system.file("DoRothEA.RDATA", package = "DoRothEA"))
DoRothEA.RDATA
if(!require("devtools")) install.packages("devtools")   # installs devtools package if not already installed
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
vignette("CellNOptR-vignette")
vignette("CARNIVAL-vignette")
setwd("~/Documents/GitHub/PHONEMeS-ILP-Examples/PHONEMeS_dt/Batth_etal/data_analysis/")
library(readr)
library(readxl)
library(limma)
mmc2 <- as.data.frame(mmc2 <- read_delim("../data/mmc2.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
mmc2$`Gene names` <- gsub("[;].*","",mmc2$`Gene names`)
mmc2$ID <- paste(mmc2$`Gene names`, mmc2$`Amino acid`, sep = "_")
mmc2$ID <- paste(mmc2$ID, mmc2$Position, sep = "")
mmc2$ID <- mmc2$ID
batches <- mmc2[,c(63, 1:44)]
batches[which(batches==0, arr.ind = TRUE)] <- NA
batches[, 2:ncol(batches)] = log2(batches[, 2:ncol(batches)])
batches = batches[-which(duplicated(batches$ID)), ]
batches <- as.data.frame(batches)
row.names(batches) <- batches$ID
batches = batches[, -c(1)]
map1 = c()
map2 = c()
idx_ctrl = c(which(grepl(pattern = "RTK01", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK02", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK03", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK04", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("control_", 1:length(idx_ctrl)))
map2 = c(map2, colnames(batches)[idx_ctrl])
idx_pdgf_3min = c(which(grepl(pattern = "RTK05", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK06", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK07", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK08", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("pdgf_3min_", 1:length(idx_pdgf_3min)))
map2 = c(map2, colnames(batches)[idx_pdgf_3min])
idx_igf1_3min = c(which(grepl(pattern = "RTK09", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK10", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK11", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK12", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("igf1_3min_", 1:length(idx_igf1_3min)))
map2 = c(map2, colnames(batches)[idx_igf1_3min])
idx_fgf2_3min = c(which(grepl(pattern = "RTK13", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK14", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK15", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK16", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("fgf2_3min_", 1:length(idx_fgf2_3min)))
map2 = c(map2, colnames(batches)[idx_fgf2_3min])
idx_pdgf_15min = c(which(grepl(pattern = "RTK17", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK18", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK19", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK20", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("pdgf_15min_", 1:length(idx_pdgf_15min)))
map2 = c(map2, colnames(batches)[idx_pdgf_15min])
idx_igf1_15min = c(which(grepl(pattern = "RTK21", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK22", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK23", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK24", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("igf1_15min_", 1:length(idx_igf1_15min)))
map2 = c(map2, colnames(batches)[idx_igf1_15min])
idx_fgf2_15min = c(which(grepl(pattern = "RTK25", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK26", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK27", x = colnames(batches), fixed = TRUE)),
which(grepl(pattern = "RTK28", x = colnames(batches), fixed = TRUE)))
map1 = c(map1, paste0("fgf2_15min_", 1:length(idx_fgf2_15min)))
map2 = c(map2, colnames(batches)[idx_fgf2_15min])
measIdx = c(idx_ctrl, idx_pdgf_3min, idx_pdgf_15min)
mapSamples = matrix(data = , nrow = length(map1), ncol = 2)
mapSamples[, 1] = map2
mapSamples[, 2] = map1
currBatches = batches[, measIdx]
cNames = c()
for(ii in 1:ncol(currBatches)){
cNames = c(cNames, mapSamples[which(mapSamples[, 1]==colnames(currBatches)[ii]), 2])
}
colnames(currBatches) = cNames
targets = as.data.frame(matrix(data = NA, nrow = ncol(currBatches), ncol = 2))
targets[, 1] = cNames
targets[which(grepl(pattern = "control", x = cNames)), 2] = "control"
targets[which(grepl(pattern = "pdgf_3min", x = cNames)), 2] = "pdgf_3min"
targets[which(grepl(pattern = "pdgf_15min", x = cNames)), 2] = "pdgf_15min"
View(currBatches)
vignette("CARNIVAL-vignette")
rm(list = ls())
setwd("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/vignettes/")
vignette("CARNIVAL-vignette")
library(CARNIVAL)
?runCARNIVAL
