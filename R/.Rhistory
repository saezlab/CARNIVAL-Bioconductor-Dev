install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
vignette("CNORfeeder-vignette")
vignette("CNORfeeder-vignette")
remove.packages(CNORfeeder)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
vignette("CNORfeeder-vignette")
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
remove.packages("CNORfeeder")
vignette("CNORfeeder-vignette")
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
getwd()
remove.packages(CellNOptR)
library(devtools)
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
remove.packages("CellNOptR")
library(devtools)
devtools::install_github("saezlab/CellNOptR", ref="ilp", build_vignettes = TRUE)
library(CellNOptR)
vignette("CellNOptR-vignette")
remove.packages("CNORode")
library(devtools)
install_github("saezlab/CNORode",ref="crossval", build_vignettes = TRUE)
library(CNORode)
remove.packages("CNORfeeder")
library(devtools)
install_github('saezlab/CellNOpt-Feeder', build_vignettes = TRUE)
library(CNORfeeder)
vignette("CNORfeeder-vignette")
vignette("CellNOptR-vignette")
vignette("CNORode-vignette")
library("CARNIVAL")
?runCARNIVAL
?runPROGENy
library(OmnipathR)
interactions <-
import_Omnipath_Interactions(filter_databases=c())
interactions = interactions[which(sum(interactions$is_stimulation+interactions$is_inhibition)==1), ]
interactions <-
import_Omnipath_Interactions(filter_databases=c())
interactions = interactions[which((interactions$is_stimulation+interactions$is_inhibition)==1), ]
library("CNORode")
vignette("CNORode-vignette")
library(CNORode)
model=readSIF(system.file("extdata", "ToyModelMMB_FeedbackAnd.sif",
package="CNORode"));
cno_data=readMIDAS(system.file("extdata", "ToyModelMMB_FeedbackAnd.csv",
package="CNORode"));
cnolist=makeCNOlist(cno_data,subfield=FALSE);
plotModel(model = model, CNOlist = cnolist)
plotCNOlist(CNOlist = cnolist)
library(MEIGOR)
f_hepato<-getLBodeContObjFunction(cnolist, model, initial_pars, indices=NULL,
time = 1, verbose = 0, transfer_function = 2, reltol = 1e-05, atol = 1e-03,
maxStepSize = Inf, maxNumSteps = 1e4, maxErrTestsFails = 50, nan_fac = 1)
n_pars=length(initial_pars$LB);
problem<-list(f=f_hepato, x_L=initial_pars$LB[initial_pars$index_opt_pars],
x_U=initial_pars$UB[initial_pars$index_opt_pars]);
#Source a function containing the options used in the CeSSR publication
source(system.file("benchmarks","get_paper_settings.R",package="MEIGOR"))
#Set max time as 20 seconds per iteration
opts<-get_paper_settings(20);
Results<-CeSSR(problem,opts,Inf,Inf,3,TRUE,global_save_list=c('cnolist','model',
'initial_pars'))
library(MEIGOR)
source(system.file("benchmarks","get_paper_settings.R",package="MEIGOR"))
library(CellNOptR)
library(CNORode)
library(MEIGOR)
# MacNamara et al. 2012 case study:
data(PKN_ToyPB, package="CellNOptR")
data(CNOlist_ToyPB, package="CellNOptR")
# original and preprocessed network
plotModel(pknmodel, cnodata)
model = preprocessing(data = cnodata, model = pknmodel,
compression = T, expansion = T)
plotModel(model, cnodata)
plotCNOlist(CNOlist = cnodata)
# set initial parameters
ode_parameters=createLBodeContPars(model, LB_n = 1, LB_k = 0,
LB_tau = 0, UB_n = 4, UB_k = 1,
UB_tau = 1, default_n = 3, default_k = 0.5,
default_tau = 0.01, opt_n = FALSE, opt_k = TRUE,
opt_tau = TRUE, random = TRUE)
## Parameter Optimization
# essm
paramsSSm=defaultParametersSSm()
paramsSSm$local_solver = "DHC"
paramsSSm$maxtime = 600;
paramsSSm$maxeval = Inf;
paramsSSm$atol=1e-6;
paramsSSm$reltol=1e-6;
paramsSSm$nan_fac=0;
paramsSSm$dim_refset=30;
paramsSSm$n_diverse=1000;
paramsSSm$maxStepSize=Inf;
paramsSSm$maxNumSteps=10000;
transferFun=4;
paramsSSm$transfer_function = transferFun;
paramsSSm$lambda_tau=0
paramsSSm$lambda_k=0
paramsSSm$bootstrap=F
paramsSSm$SSpenalty_fac=0
paramsSSm$SScontrolPenalty_fac=0
# run the optimisation algorithm
opt_pars=parEstimationLBode(cnodata,model, method="essm",
ode_parameters=ode_parameters, paramsSSm=paramsSSm)
library(doParallel)
R=crossvalidateODE(CNOlist = cnodata, model = model,
type="datapoint", nfolds=3, parallel = TRUE,
ode_parameters = ode_parameters, paramsSSm = paramsSSm)
rm(list = ls())
remove.packages("CNORode")
library(devtools)
install_github("saezlab/CNORode",ref="crossval", build_vignettes = TRUE)
library(CNORode)
?crossvalidateODE
library(CNORfeeder)
vignette("CNORfeeder-vignette")
data(CNOlistDREAM,package="CellNOptR")
data(DreamModel,package="CellNOptR")
BTable <- makeBTables(CNOlist=CNOlistDREAM, k=2, measErr=c(0.1, 0))
Lrank <- linksRanking(CNOlist=CNOlistDREAM, measErr=c(0.1, 0), savefile=FALSE)
model<-preprocessing(data=CNOlistDREAM, model=DreamModel)
modelIntegr <- mapBTables2model(BTable=BTable,model=model,allInter=TRUE)
plotModel(model=modelIntegr, CNOlist=CNOlistDREAM, indexIntegr=modelIntegr$indexIntegr)
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10)
data(PPINigraph,package="CNORfeeder")
data(UniprotIDdream,package="CNORfeeder")
modelIntegrWeight <- weighting(modelIntegr=modelIntegr, PKNmodel=DreamModel,
CNOlist=CNOlistDREAM, integrFac=10,
UniprotID=UniprotIDdream, PPI=PPINigraph)
initBstring<-rep(1,length(modelIntegrWeight$reacID))
DreamT1opt<-gaBinaryT1W(CNOlist=CNOlistDREAM, model=modelIntegrWeight,
initBstring=initBstring, maxGens=2, popSize=5, verbose=FALSE)
plotModel(model=modelIntegrWeight, CNOlist=CNOlistDREAM, bString=DreamT1opt$bString)
dev.off()
library(CellNOptR)
vignette("CellNOptR-vignette")
library(CellNOptR)
?ilpBinaryT1
version
version
data(Ec_core, envir = environment()) #get Escherichia coli core metabolic model
bac <- Bac(Ec_core,deathrate=0.05,
minweight=0.05,growtype="exponential") #initialize a bacterium
arena <- Arena(n=20,m=20) #initialize the environment
arena <- addOrg(arena,bac,amount=10) #add 10 organisms
library(BacArena)
data(Ec_core, envir = environment()) #get Escherichia coli core metabolic model
bac <- Bac(Ec_core,deathrate=0.05,
minweight=0.05,growtype="exponential") #initialize a bacterium
arena <- Arena(n=20,m=20) #initialize the environment
arena <- addOrg(arena,bac,amount=10) #add 10 organisms
arena <- Arena(n=20,m=20)
mat <- matrix(sample(c(0,1), 400, replace = TRUE), nrow = 20, ncol = 20)
bac <- Bac(Ec_core)
arena <- addOrg(arena, specI=bac, posmat = mat)
rm(list = ls())
library(CellNOptR)
?gaBinaryT1
etw
setwd("~/Desktop/CARNIVAL-SimplifiedCode_AddOn/dt/")
sif = matrix(data = , nrow = 18, ncol = 3)
sif = matrix(data = , nrow = 18, ncol = 3)
sif[1, ] = c("P", "1", "N1")
sif = matrix(data = , nrow = 18, ncol = 3)
sif[1, ] = c("P", "1", "N1")
sif[2, ] = c("N1", "1", "M1")
sif[3, ] = c("M1", "-1", "N4")
sif[4, ] = c("N4", "1", "M3")
sif[5, ] = c("M3", "1", "N6")
sif[6, ] = c("N6", "1", "M5")
sif[7, ] = c("N6", "-1", "N7")
sif[8, ] = c("N7", "1", "M7")
sif[9, ] = c("P", "1", "N2")
sif[10, ] = c("N2", "1", "N3")
sif[11, ] = c("N3", "1", "M2")
sif[12, ] = c("M2", "-1", "N5")
sif[13, ] = c("N5", "1", "M4")
sif[14, ] = c("M4", "1", "N7")
sif[15, ] = c("M4", "1", "M6")
sif[16, ] = c("M6", "1", "N8")
sif[17, ] = c("N8", "1", "N3")
sif[18, ] = c("N3", "1", "N4")
data = matrix(data = , nrow = 2, ncol = 7)
colnames(data) = paste0("M", 1:7)
data[2, ] = c(1, -1, -1, 1, -1, 1, 1)
sif = matrix(data = , nrow = 18, ncol = 3)
sif[1, ] = c("P", "1", "N1")
sif[2, ] = c("N1", "1", "M1")
sif[3, ] = c("M1", "-1", "N4")
sif[4, ] = c("N4", "1", "M3")
sif[5, ] = c("M3", "1", "N6")
sif[6, ] = c("N6", "1", "M5")
sif[7, ] = c("N6", "-1", "N7")
sif[8, ] = c("N7", "1", "M7")
sif[9, ] = c("P", "1", "N2")
sif[10, ] = c("N2", "1", "N3")
sif[11, ] = c("N3", "1", "M2")
sif[12, ] = c("M2", "-1", "N5")
sif[13, ] = c("N5", "1", "M4")
sif[14, ] = c("M4", "1", "N7")
sif[15, ] = c("M4", "1", "M6")
sif[16, ] = c("M6", "1", "N8")
sif[17, ] = c("N8", "1", "N3")
sif[18, ] = c("N3", "1", "N4")
data = matrix(data = , nrow = 2, ncol = 7)
colnames(data) = paste0("M", 1:7)
data[1, ] = c(1, 1, -1, -1, -1, -1, 1)
data[2, ] = c(1, -1, -1, 1, -1, 1, 1)
View(data)
View(sif)
sif = matrix(data = , nrow = 18, ncol = 3)
sif[1, ] = c("P", "1", "N1")
sif[2, ] = c("N1", "1", "M1")
sif[3, ] = c("M1", "-1", "N4")
sif[4, ] = c("N4", "1", "M3")
sif[5, ] = c("M3", "1", "N6")
sif[6, ] = c("N6", "1", "M5")
sif[7, ] = c("N6", "-1", "N7")
sif[8, ] = c("N7", "1", "M7")
sif[9, ] = c("P", "1", "N2")
sif[10, ] = c("N2", "1", "N3")
sif[11, ] = c("N3", "1", "M2")
sif[12, ] = c("M2", "-1", "N5")
sif[13, ] = c("N5", "1", "M4")
sif[14, ] = c("M4", "1", "N7")
sif[15, ] = c("M4", "1", "M6")
sif[16, ] = c("M6", "1", "N8")
sif[17, ] = c("N8", "1", "N3")
sif[18, ] = c("N3", "1", "N4")
data = matrix(data = , nrow = 1, ncol = 7)
colnames(data) = paste0("M", 1:7)
data[1, ] = c(1, 1, -1, -1, -1, -1, 1)
# data[2, ] = c(1, -1, -1, 1, -1, 1, 1)
##
# CARNIVAL
library(CARNIVAL)
inputs = as.matrix(c(1))
colnames(inputs) = "P"
View(inputs)
res = runCARNIVAL(solverPath = "~/Documents/cplex", netObj = sif, measObj = data, inputObj = inputs, DOTfig = TRUE)
reset()
res
res = runCARNIVAL(solverPath = "~/Documents/cplex", netObj = sif, measObj = data, inputObj = inputs, DOTfig = TRUE)
View(inputs)
View(sif)
View(data)
res = runCARNIVAL(solverPath = "~/Documents/cplex", netObj = sif, measObj = data, inputObj = inputs, DOTfig = TRUE, mipGAP = 0, poolrelGAP = 0)
solverPath = "~/Documents/cplex"
netObj = sif
measObj = data
inputObj = inputs
DOTfig = TRUE
mipGAP = 0
poolrelGAP = 0
res = checkInputs(solverPath = solverPath, netObj = netObj, measObj = measObj,
inputObj = inputObj, weightObj = weightObj,
parallelIdx1 = parallelIdx1, parallelIdx2 = parallelIdx2,
nodeID = nodeID, UP2GS = UP2GS, DOTfig = DOTfig,
timelimit = timelimit, mipGAP = mipGAP,
poolrelGAP = poolrelGAP, limitPop = limitPop,
poolCap = poolCap, poolIntensity = poolIntensity,
poolReplace = poolReplace, alphaWeight = alphaWeight,
betaWeight = betaWeight, dir_name = dir_name,
solver = solver,
experimental_conditions = experimental_conditions)
library(CARNIVAL)
res = checkInputs(solverPath = solverPath, netObj = netObj, measObj = measObj,
inputObj = inputObj, weightObj = weightObj,
parallelIdx1 = parallelIdx1, parallelIdx2 = parallelIdx2,
nodeID = nodeID, UP2GS = UP2GS, DOTfig = DOTfig,
timelimit = timelimit, mipGAP = mipGAP,
poolrelGAP = poolrelGAP, limitPop = limitPop,
poolCap = poolCap, poolIntensity = poolIntensity,
poolReplace = poolReplace, alphaWeight = alphaWeight,
betaWeight = betaWeight, dir_name = dir_name,
solver = solver,
experimental_conditions = experimental_conditions)
ptm <- proc.time()
print("Writing constraints...")
pknList <- as.data.frame(netObj)
colnames(pknList) <- c("Node1", "Sign", "Node2")
pknList$Node1 = as.character(pknList$Node1)
pknList$Sign = as.character(as.numeric(as.character(pknList$Sign)))
pknList$Node2 = as.character(pknList$Node2)
View(pknList)
measurements <- sign(measObj)
measWeights <- abs(measObj)
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputObj,
betaWeight=betaWeight, scores=weightObj,
mipGAP=mipGAP,poolrelGAP=poolrelGAP,
limitPop=limitPop,poolCap=poolCap,
poolIntensity=poolIntensity,
poolReplace=poolReplace,timelimit=timelimit,
measWeights=measWeights,repIndex=repIndex,
condition = condition)
#'\code{writeLPFile}
#'
#' Write a list of linear programming (LP) constraints into a file while will be
#' read by interactive cplex solver to perform network optimisation.
#'
writeLPFile <- function(data = data, pknList = pknList, inputs = inputs,
alphaWeight=1, betaWeight=0.2, scores=scores,
mipGAP=0.1, poolrelGAP=0.01, limitPop=100, poolCap=100,
poolIntensity=0, poolReplace=2,timelimit=1800,
measWeights=NULL, repIndex, condition="") {
dataMatrix <- buildDataMatrix(data = data, pknList = pknList, inputs = inputs)
variables <- create_variables_all(pknList = pknList, dataMatrix = dataMatrix)
oF <- write_objective_function_all(dataMatrix = dataMatrix,
variables = variables,
alphaWeight = alphaWeight,
betaWeight = betaWeight, scores=scores,
measWeights=measWeights)
bounds <- write_boundaries(variables = variables, oF=oF)
binaries <- write_binaries(variables = variables)
generals <- write_generals(variables = variables, oF = oF)
c0 <- write_constraints_objFunction_all(variables = variables,
dataMatrix = dataMatrix)
c1 <- write_constraints_1_all(variables = variables)
c2 <- write_constraints_2_all(variables = variables)
c3 <- write_constraints_3_all(variables = variables)
c4 <- write_constraints_4_all(variables = variables)
c5 <- write_constraints_5_all(variables = variables)
c6 <- write_constraints_6(variables = variables, dataMatrix = dataMatrix,
inputs = inputs)
c7 <- write_constraints_7(variables = variables, dataMatrix = dataMatrix,
inputs = inputs)
c8 <- write_constraints_8(variables = variables, inputs = inputs,
pknList = pknList)
c9 <- write_loop_constraints(variables = variables, pknList = pknList,
inputs = inputs)
allC <- all_constraints_wLoop(c0 = c0, c1 = c1, c2 = c2, c3 = c3, c4 = c4,
c5 = c5, c6 = c6, c7 = c7, c8 = c8, c9 = c9)
writeSolverFiles(condition=condition, repIndex=repIndex, oF=oF,
allC=allC, bounds=bounds, binaries=binaries,
generals=generals, mipGAP=mipGAP,
poolrelGAP=poolrelGAP, poolReplace=poolReplace,
limitPop=limitPop, poolCap=poolCap,
poolIntensity=poolIntensity, timelimit=timelimit)
return(variables)
}
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputObj,
betaWeight=betaWeight, scores=weightObj,
mipGAP=mipGAP,poolrelGAP=poolrelGAP,
limitPop=limitPop,poolCap=poolCap,
poolIntensity=poolIntensity,
poolReplace=poolReplace,timelimit=timelimit,
measWeights=measWeights,repIndex=repIndex,
condition = condition)
remove.packages("CARNIVAL")
library(devtools)
install_github('saezlab/CARNIVAL-Bioconductor-Dev', build_vignettes = TRUE, ref = ""guideline_codes)
library(devtools)
install_github('saezlab/CARNIVAL-Bioconductor-Dev', build_vignettes = TRUE, ref = "guideline_codes")
library(CARNIVAL)
res = checkInputs(solverPath = solverPath, netObj = netObj, measObj = measObj,
inputObj = inputObj, weightObj = weightObj,
parallelIdx1 = parallelIdx1, parallelIdx2 = parallelIdx2,
nodeID = nodeID, UP2GS = UP2GS, DOTfig = DOTfig,
timelimit = timelimit, mipGAP = mipGAP,
poolrelGAP = poolrelGAP, limitPop = limitPop,
poolCap = poolCap, poolIntensity = poolIntensity,
poolReplace = poolReplace, alphaWeight = alphaWeight,
betaWeight = betaWeight, dir_name = dir_name,
solver = solver,
experimental_conditions = experimental_conditions)
getwd()
setwd("~/Documents/GitHub/CARNIVAL-Bioconductor-Dev/R/")
files.sources = list.files()
sapply(files.sources, source)
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputObj,
betaWeight=betaWeight, scores=weightObj,
mipGAP=mipGAP,poolrelGAP=poolrelGAP,
limitPop=limitPop,poolCap=poolCap,
poolIntensity=poolIntensity,
poolReplace=poolReplace,timelimit=timelimit,
measWeights=measWeights,repIndex=repIndex,
condition = condition)
solverPath=NULL,
netObj=NULL,
measObj=NULL,
inputObj=NULL,
weightObj=NULL,
parallelIdx1=1,
parallelIdx2=1,
nodeID="uniprot",
UP2GS=NULL,
DOTfig=T,
timelimit=600,
mipGAP=0
poolrelGAP=0.0001
limitPop=500
poolCap=100
poolIntensity=4
poolReplace=2
alphaWeight=1
betaWeight=0.2
dir_name=paste0(getwd(), "/DOTfigures")
solver="cplex"
experimental_conditions = NULL
solverPath=NULL
netObj=NULL
measObj=NULL
inputObj=NULL
weightObj=NULL
parallelIdx1=1
parallelIdx2=1
nodeID="uniprot"
UP2GS=NULL
DOTfig=T
timelimit=600
mipGAP=0
poolrelGAP=0.0001
limitPop=500
poolCap=100
poolIntensity=4
poolReplace=2
alphaWeight=1
betaWeight=0.2
dir_name=paste0(getwd(), "/DOTfigures")
solver="cplex"
experimental_conditions = NULL
result = solveCARNIVAL(solverPath = solverPath, netObj = res$inputs$network,
measObj = res$measurements,
inputObj = res$inputs$inputs,
weightObj = res$weights, parallelIdx1 = parallelIdx1,
parallelIdx2 = parallelIdx2, nodeID = nodeID,
UP2GS = UP2GS, DOTfig = DOTfig, timelimit = timelimit,
mipGAP = mipGAP, poolrelGAP = poolrelGAP,
limitPop = limitPop, poolCap = poolCap,
poolIntensity = poolIntensity,
poolReplace = poolReplace, alphaWeight = alphaWeight,
betaWeight = betaWeight, dir_name = dir_name,
solver = solver,
experimental_conditions = experimental_conditions,
condition = res$condition, repIndex = res$repIndex)
variables <- writeLPFile(data=measurements,pknList=pknList,inputs=inputObj,
betaWeight=betaWeight, scores=weightObj,
mipGAP=mipGAP,poolrelGAP=poolrelGAP,
limitPop=limitPop,poolCap=poolCap,
poolIntensity=poolIntensity,
poolReplace=poolReplace,timelimit=timelimit,
measWeights=measWeights,repIndex=repIndex,
condition = condition)
inputs
ncol(inputs)
rm(list = ls())
sif = matrix(data = , nrow = 18, ncol = 3)
sif[1, ] = c("P", "1", "N1")
sif[2, ] = c("N1", "1", "M1")
sif[3, ] = c("M1", "-1", "N4")
sif[4, ] = c("N4", "1", "M3")
sif[5, ] = c("M3", "1", "N6")
sif[6, ] = c("N6", "1", "M5")
sif[7, ] = c("N6", "-1", "N7")
sif[8, ] = c("N7", "1", "M7")
sif[9, ] = c("P", "1", "N2")
sif[10, ] = c("N2", "1", "N3")
sif[11, ] = c("N3", "1", "M2")
sif[12, ] = c("M2", "-1", "N5")
sif[13, ] = c("N5", "1", "M4")
sif[14, ] = c("M4", "1", "N7")
sif[15, ] = c("M4", "1", "M6")
sif[16, ] = c("M6", "1", "N8")
sif[17, ] = c("N8", "1", "N3")
sif[18, ] = c("N3", "1", "N4")
data = matrix(data = , nrow = 1, ncol = 7)
colnames(data) = paste0("M", 1:7)
data[1, ] = c(1, 1, -1, -1, -1, -1, 1)
# data[2, ] = c(1, -1, -1, 1, -1, 1, 1)
inputs = as.matrix(c(1))
colnames(inputs) = "P"
##
# CARNIVAL
library(CARNIVAL)
res = runCARNIVAL(solverPath = "~/Documents/cplex", netObj = sif, measObj = data, inputObj = inputs, DOTfig = TRUE, mipGAP = 0, poolrelGAP = 0)
res = runCARNIVAL(solverPath = "~/Documents/cplex", netObj = sif, measObj = data, inputObj = inputs, DOTfig = TRUE, mipGAP = 0, poolrelGAP = 0, limitPop = 1, poolCap = 1)
View(sif)
data = data[, c(5, 7, 6)]
data = as.matrix(data)
View(data)
data = t(data)
View(data)
inputs = as.matrix(c(1))
colnames(inputs) = "P"
library(CARNIVAL)
res = runCARNIVAL(solverPath = "~/Documents/cplex", netObj = sif, measObj = data, inputObj = inputs, DOTfig = TRUE, mipGAP = 0, poolrelGAP = 0, limitPop = 1, poolCap = 1)
